CONFIGURAR O STORE
1. Auth do usuario será feito pelo redux - token jwt que precisa ser enviado,
tem de estar em um lugar que todos tenhm acesso na applicacao
2. REDUX - criar uma past store no SRC
3. Instalar o redux 'yarn add redux redux-saga react-redux reactotron-redux reactotron-redux-saga immer '
4. Criar:
>STORE
  >MODULES
    >AUTH
      >ACTIONS.js
      >REDUCER.js - sempre será uma funcao, e contem lib immer para manipula estados
      >SAGAS.js
    >ROOTREDUCER.js - vai unir todos os reducers do modules (metodo combineReducers())
    >ROOTSAGA.js - vai unir todos os sagas do modules
>CREATESTORE.js - criar uma variavel ENHANCER
>INDEX.js - criar os middlewares e stores, importar os roots
5. APP.js importar o PROVIDER do react-redux e colocar por volta de tudo <Provider>{{}}</Provider>
e depois importar o STORE criado no INDEX.js anterior
AUTENTICACAO
1. Comecar definindo as ACTIONS que serao utilizadas.
2. Depois implementar o sagas.js importando - import { takeLatest, call, put, all }
3. Importar  AXIOS 'yarn add axios'
ARMAZENAR PERFIL
1. criar o MODULES 'user' semelhante ao modules 'auth'
PERSISTINDO NO BD DO BROWSER
1. Importar o 'yarn add redux-persist' para persistir os dados da autenticacao e do usuario
no BD do BROWSER
CADASTRO NA APLICACAO
1. Criar no ACTIONS.js signupRequest
2. Importar no arquivo index.js do SignUp o - import { useDispatch } from 'react-redux';
3. Criar a const dispatch
4. No SAGA de Auth inlcuir para poder OUVIR o dispatch() do SignUp (index)
REQUISCOES AUTENTICADAS
1. No SAGAS.js do AUTH fazer chamada da API na propriedade dos HEADERS;
api.defaults.headers.Authorization = `Bearer ${token}`;
2. No INDEX.js do Dashboard importar a API para testar api.get('appointments');

LOGOUT
1. Defino uma action em AUTH = signOut(), e no REDUCER do AUTH eu vou ouvir
essa ACTION - case '@auth/SIGN_OUT', e no REDUCER do USER eu vou ouvir essa action
tambem - case '@user/SIGN_OUT' e coloco Profile = null;
2. Depois no SAGAS.js de AUTH vou ouvir essa ACTION e usar o history e redirecionar
o usario para raiz do projeto:
export function signOut() {
  history.push('/');
}
3. VOlto no PROFILE novamente e importar a action SIGN_OUT, e crio a funcao
function handleSignOut() para o onClick() do botao Sair do GoBarber.

Fluxo Redux: meu componente dispara uma action -> a action avisa um reducer -> o reducer faz
as alterações que precisa -> e depois o redux avisa todos componentes que precisam da nova
informação para que eles atualizem.

COM SAGAS
A action disparada pro redux é a REQUEST. A REQUEST não é ouvida pelo reducer,
 apenas pelo saga q é quem faz a chamada (call) a API.
Então, qndo o saga terminar, ele dispara a action SUCCESS. E é a SUCCESS q é ouvida pelo reducer.

